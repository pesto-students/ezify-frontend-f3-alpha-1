{"version":3,"file":"static/js/972.f3f4dc57.chunk.js","mappings":"oWA+JA,GAAeA,EAAAA,EAAAA,IAAQ,MALI,SAACC,GAAD,MAAe,CACxCC,SAAU,SAACC,GAAD,OAAWF,GAASG,EAAAA,EAAAA,GAAoBD,KAClDE,QAAS,SAACC,GAAD,OAAUL,GAASM,EAAAA,EAAAA,GAAeD,QAG7C,EAAiDE,EAAAA,EAAAA,aA/InC,SAAC,GAAoC,IAAlCH,EAAiC,EAAjCA,QAASH,EAAwB,EAAxBA,SAAUO,EAAc,EAAdA,QAC5BC,GAAaC,EAAAA,EAAAA,YAAWC,EAAAA,GAExBC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,MAAO,GACPC,IAAK,GACLC,GAAI,IAENC,iBAAkBC,EAAAA,GAAW,CAC3BJ,MAAOI,EAAAA,KAAaJ,QAAQK,IAAI,GAAGC,SAAS,YAC5CL,IAAKG,EAAAA,KAAaC,IAAI,GAAGE,IAAI,GAAGD,SAAS,YACzCJ,GAAIE,EAAAA,KAAaE,SAAS,cAE5BE,SAAU,SAACC,GACTC,OAIEC,EAAkB,CACtBT,GAAI,QACJU,MAAO,QACPC,aAAa,EACbC,KAAM,eACNjB,OAAAA,GAGIkB,EAAgB,CACpBb,GAAI,MACJU,MAAO,MACPC,aAAa,EACbC,KAAM,eACNjB,OAAAA,GAGF,GAAgDmB,EAAAA,EAAAA,UAAS,CACvDF,KAAM,SACNG,KAAM,QACNC,QAAS,6BACTC,UAAU,IAJZ,eAAOC,EAAP,KAAyBC,EAAzB,MAOAC,EAAAA,EAAAA,YAAU,WACDzB,EAAO0B,iBACb,KAEHD,EAAAA,EAAAA,YAAU,WACRD,EAAoB,CAClBP,KAAM,SACNG,KAAM,QACNC,QAAS,6BACTC,UAAWtB,EAAO2B,YAEnB,CAAC3B,EAAO2B,UAEX,IAAMC,EAAO,mCAAG,wFACV5B,EAAOY,OAAOT,MADJ,iCAEW0B,EAAAA,EAAAA,GAAaC,GAFxB,OAENC,EAFM,OAGZ/B,EAAOgC,cAAc,KAAMD,EAASE,KACpCC,QAAQC,IAAI,YAAaJ,EAASK,WAJtB,2CAAH,qDAQPN,EAAU,mCAAG,6FACXO,EAAU,CACdlC,MAAOH,EAAOY,OAAOT,OAFN,SAKEN,EAAWyC,SAASC,EAAAA,EAAAA,SAAmBF,GALzC,cAKXG,EALW,yBAMVA,GANU,2CAAH,qDASV3B,EAAS,mCAAG,yGACOgB,EAAAA,EAAAA,GAAaY,GADpB,UACVV,EADU,OAEhBG,QAAQC,IAAIJ,GACZG,QAAQC,IAA8B,WAAlB,OAARJ,QAAQ,IAARA,GAAA,UAAAA,EAAUtC,YAAV,eAAgBiD,QACC,WAAjB,OAARX,QAAQ,IAARA,OAAA,EAAAA,EAAUY,YAJE,uBAKd3C,EAAO4C,cAAc,MAAO,eALd,6BASc,WAAlB,OAARb,QAAQ,IAARA,GAAA,UAAAA,EAAUtC,YAAV,eAAgBiD,OATJ,wBAUd1C,EAAOgC,cAAc,MAAO,IAAI,GAChChC,EAAOgC,cAAc,KAAM,MAAM,GACjChC,EAAO4C,cAAc,QAAS,8BAZhB,2BAgBhBpD,EAAQuC,EAAStC,MACjBJ,EAAS0C,EAASzC,OAClBM,EAAQiD,KAAK,cAlBG,4CAAH,qDAqBTJ,EAAY,mCAAG,6FACbJ,EAAU,CACdhC,GAAIL,EAAOY,OAAOP,GAClBD,IAAKJ,EAAOY,OAAOR,KAHF,SAMAP,EAAWyC,SAASC,EAAAA,EAAAA,WAAqBF,GANzC,cAMbG,EANa,yBAOZA,GAPY,2CAAH,qDAUlB,OACE,gBAAKM,UAAU,wBAAf,UACE,iBAAKA,UAAU,MAAf,WACE,gBAAKA,UAAU,wFAAf,UACE,gBAAKA,UAAU,+DAAf,UACE,gBAAKC,IAAKC,EAAWC,IAAI,gBAG7B,gBAAKH,UAAU,oFAAf,UACE,iBAAMA,UAAU,eAAenC,SAAUX,EAAOkD,aAAhD,UACE,iBAAKJ,UAAU,wFAAf,WACE,eAAIA,UAAU,OAAd,6BAEA,iBAAKA,UAAU,QAAf,WACE,SAAC,KAAD,UAAiBhC,KACjB,gBAAKgC,UAAU,UAAf,UACE,iBAAMA,UAAW9C,EAAOmD,OAAOhD,MAAQ,UAAY,KAAMiD,QAASxB,EAAlE,4BAMJ,gBAAKkB,UAAU,aAAf,UACE,SAAC,KAAD,UAAiB5B,OAGnB,SAAC,KAAD,UAAkBK,qB","sources":["pages/admin/login/login.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport \"./login.scss\";\r\n\r\nimport BannerImg from \"./../../../assets/admin_page/banner.webp\";\r\nimport CustomButton from \"../../../components/atmoic/customButton/customButton\";\r\nimport FormControl from \"../../../components/atmoic/formControl/formControl\";\r\nimport { ApiCallsContext } from \"../../../services/api.service\";\r\nimport { API_URLS } from \"../../../utlis/constants\";\r\nimport { catchHandler } from \"../../../utlis/catchHandler.utlis\";\r\nimport { setCurrentUser, setCurrentUserToken } from \"../../../redux/user/user.actions\";\r\n\r\nconst Login = ({ setUser, setToken, history }) => {\r\n  const ApiContext = useContext(ApiCallsContext);\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: \"\",\r\n      otp: \"\",\r\n      id: \"\",\r\n    },\r\n    validationSchema: Yup.object({\r\n      email: Yup.string().email().min(3).required(\"Required\"),\r\n      otp: Yup.string().min(4).max(4).required(\"Required\"),\r\n      id: Yup.string().required(\"Required\"),\r\n    }),\r\n    onSubmit: (values) => {\r\n      verifyOtp();\r\n    },\r\n  });\r\n\r\n  const emailAttributes = {\r\n    id: \"email\",\r\n    label: \"Email\",\r\n    isMandatory: true,\r\n    type: \"input-formik\",\r\n    formik,\r\n  };\r\n\r\n  const otpAttributes = {\r\n    id: \"otp\",\r\n    label: \"OTP\",\r\n    isMandatory: true,\r\n    type: \"input-formik\",\r\n    formik,\r\n  };\r\n\r\n  const [buttonAttributes, setButtonAttributes] = useState({\r\n    type: \"submit\",\r\n    text: \"Login\",\r\n    classes: \"btn-block font-weight-bold\",\r\n    disabled: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    (() => formik.validateForm())();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setButtonAttributes({\r\n      type: \"submit\",\r\n      text: \"Login\",\r\n      classes: \"btn-block font-weight-bold\",\r\n      disabled: !formik.isValid,\r\n    });\r\n  }, [formik.isValid]);\r\n\r\n  const sendOTP = async () => {\r\n    if (formik.values.email) {\r\n      const response = await catchHandler(sendOTPAPI);\r\n      formik.setFieldValue(\"id\", response._id);\r\n      console.log(\"otpVerify\", response.otpVerify);\r\n    }\r\n  };\r\n\r\n  const sendOTPAPI = async () => {\r\n    const postObj = {\r\n      email: formik.values.email,\r\n    };\r\n\r\n    const data = await ApiContext.postData(API_URLS.SEND_OTP, postObj);\r\n    return data;\r\n  };\r\n\r\n  const verifyOtp = async () => {\r\n    const response = await catchHandler(verifyOTPAPI);\r\n    console.log(response);\r\n    console.log(response?.user?.roles !== \"admin\");\r\n    if (response?.statusCode === \"10001\") {\r\n      formik.setFieldError(\"otp\", \"Invalid OTP\");\r\n      return;\r\n    }\r\n\r\n    if (response?.user?.roles !== \"admin\") {\r\n      formik.setFieldValue(\"otp\", \"\", false);\r\n      formik.setFieldValue(\"id\", null, false);\r\n      formik.setFieldError(\"email\", \"This email is not of admin\");\r\n      return;\r\n    }\r\n\r\n    setUser(response.user);\r\n    setToken(response.token);\r\n    history.push(\"/dashboard\");\r\n  };\r\n\r\n  const verifyOTPAPI = async () => {\r\n    const postObj = {\r\n      id: formik.values.id,\r\n      otp: formik.values.otp,\r\n    };\r\n\r\n    const data = await ApiContext.postData(API_URLS.VERIFY_OTP, postObj);\r\n    return data;\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid admin\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6 px-0 d-flex align-items-center justify-content-center admin__container--left\">\r\n          <div className=\"admin__left d-flex align-items-center justify-content-center\">\r\n            <img src={BannerImg} alt=\"Banner\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-6 d-flex align-items-center justify-content-center admin__container--right\">\r\n          <form className=\"admin__login\" onSubmit={formik.handleSubmit}>\r\n            <div className=\"admin__login--container d-flex flex-column align-items-center justify-content-between\">\r\n              <h3 className=\"mb-3\">Login as Admin</h3>\r\n\r\n              <div className=\"w-100\">\r\n                <FormControl {...emailAttributes} />\r\n                <div className=\"sendOTP\">\r\n                  <span className={formik.errors.email ? \"disable\" : null} onClick={sendOTP}>\r\n                    Send OTP\r\n                  </span>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"w-100 mb-4\">\r\n                <FormControl {...otpAttributes} />\r\n              </div>\r\n\r\n              <CustomButton {...buttonAttributes} />\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setToken: (token) => dispatch(setCurrentUserToken(token)),\r\n  setUser: (user) => dispatch(setCurrentUser(user)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(withRouter(Login));\r\n"],"names":["connect","dispatch","setToken","token","setCurrentUserToken","setUser","user","setCurrentUser","withRouter","history","ApiContext","useContext","ApiCallsContext","formik","useFormik","initialValues","email","otp","id","validationSchema","Yup","min","required","max","onSubmit","values","verifyOtp","emailAttributes","label","isMandatory","type","otpAttributes","useState","text","classes","disabled","buttonAttributes","setButtonAttributes","useEffect","validateForm","isValid","sendOTP","catchHandler","sendOTPAPI","response","setFieldValue","_id","console","log","otpVerify","postObj","postData","API_URLS","data","verifyOTPAPI","roles","statusCode","setFieldError","push","className","src","BannerImg","alt","handleSubmit","errors","onClick"],"sourceRoot":""}