{"version":3,"file":"static/js/305.6d0f2f2e.chunk.js","mappings":"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","sources":["pages/payment/index.js","redux/cart/cart.actions.js","redux/cart/cart.selectors.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport \"./payment.scss\";\r\n\r\nimport CustomButton from \"../../components/atmoic/customButton/customButton\";\r\n\r\nimport rupee from \"./../../assets/service_page/rupee.webp\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { selectCartItems, selectCartTotal } from \"../../redux/cart/cart.selectors\";\r\nimport { connect } from \"react-redux\";\r\nimport { disableFromCart, emptyCart, removeFromCart } from \"../../redux/cart/cart.actions\";\r\nimport { selectToken, selectUserDetails } from \"../../redux/user/user.selectors\";\r\nimport { ApiCallsContext } from \"../../services/api.service\";\r\nimport { catchHandler } from \"../../utlis/catchHandler.utlis\";\r\nimport { API_URLS } from \"../../utlis/constants\";\r\nimport { setToasterConfig } from \"../../redux/toaster/toaster.actions\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport ModalBase from \"../../components/atmoic/modal/modal\";\r\n\r\nconst Payment = ({ cartItems, totalAmount, disabledItemFromCart, userToken, setCartEmpty, history }) => {\r\n  const ApiContext = useContext(ApiCallsContext);\r\n\r\n  const [show, setShow] = useState(false);\r\n  const [callAPI, setCallAPI] = useState(false);\r\n  const [message, setMessage] = useState(null);\r\n\r\n  const handleClose = () => {\r\n    if (message.message === \"Payment Successfully Done\") {\r\n      history.push(\"/bookings\");\r\n    }\r\n    setShow(false);\r\n    setCallAPI(false);\r\n  };\r\n  const handleShow = () => setShow(true);\r\n\r\n  const handlePaymentSubmit = async () => {\r\n    const response = await catchHandler(paymentSubmitAPI);\r\n    console.log(response);\r\n    if (response) {\r\n      setMessage({\r\n        title: \"\",\r\n        message: \"Payment Successfully Done\",\r\n      });\r\n      setShow(true);\r\n      setCartEmpty();\r\n    }\r\n\r\n    console.log(userToken);\r\n  };\r\n\r\n  const paymentSubmitAPI = async () => {\r\n    let postObj = {\r\n      total_amount: totalAmount,\r\n      bookings: [],\r\n    };\r\n\r\n    cartItems.forEach((item) => {\r\n      if (item.active) {\r\n        postObj.bookings.push({\r\n          serviceID: item.serviceID,\r\n          vendorID: item.vendorID,\r\n          baseprice: item.basePrice,\r\n        });\r\n      }\r\n    });\r\n\r\n    const headers = {\r\n      Authorization: `Bearer ${userToken}`,\r\n    };\r\n\r\n    console.log(postObj);\r\n\r\n    const data = await ApiContext.postData(API_URLS.CREATE_PAYMENT, postObj, { headers });\r\n    return data;\r\n  };\r\n\r\n  const [btnAttributes, setbtnAttributes] = useState({\r\n    type: \"submit\",\r\n    text: \"PAY NOW\",\r\n    classes: \"cp-3 btn-block\",\r\n    onClick: () => setCallAPI(true),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (totalAmount <= 0) {\r\n      setbtnAttributes({\r\n        type: \"submit\",\r\n        text: \"PAY NOW\",\r\n        classes: \"cp-3 btn-block\",\r\n        disabled: true,\r\n        onClick: () => setCallAPI(true),\r\n      });\r\n    } else {\r\n      setbtnAttributes({\r\n        type: \"submit\",\r\n        text: \"PAY NOW\",\r\n        classes: \"cp-3 btn-block\",\r\n        disabled: false,\r\n        onClick: () => setCallAPI(true),\r\n      });\r\n    }\r\n  }, [totalAmount]);\r\n\r\n  useEffect(() => {\r\n    if (callAPI) {\r\n      if (userToken) {\r\n        handlePaymentSubmit();\r\n      } else {\r\n        setMessage({\r\n          title: \"ðŸ’¥ Warning\",\r\n          message: \"Please Login\",\r\n        });\r\n        setShow(true);\r\n      }\r\n    }\r\n  }, [userToken, callAPI]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"payment-page px-3 px-lg-0\">\r\n        <div className=\"container\">\r\n          <div className=\"row py-4\">\r\n            <div className=\"col-9 mx-auto payment-page__heading-text py-2\">PAYMENT</div>\r\n            <div className=\"col-lg-9 col-md-11 payment-page__custom-container mx-auto\">\r\n              <div className=\"payment-page__custom-container-1 customScroll\">\r\n                {cartItems.length > 0 &&\r\n                  cartItems.map((item, index) => (\r\n                    <div className=\"row payment-page__vendorTile mb-2 mr-2\" key={index}>\r\n                      <div className={`col-2 d-flex align-items-center justify-content-center ${item.active ? null : \"custom-blur\"}`}>\r\n                        <img src={item.profileImage} alt=\"Vendor Profile\" className=\"h-100 w-100 rounded-circle\" />\r\n                      </div>\r\n                      <div className={`col-4 ${item.active ? null : \"custom-blur\"}`}>\r\n                        <div className=\"mb-2 d-flex align-items-center justify-content-start payment-page__vendorTile__icons\">{item.serviceName}</div>\r\n                        <div className=\"d-flex align-items-center justify-content-between payment-page__vendorTile__nameRatings\">\r\n                          <div className=\"payment-page__vendorTile__name\">\r\n                            {item.firstName} {item.lastName}\r\n                          </div>\r\n                        </div>\r\n                        {/* <div className=\"d-flex align-items-center justify-content-start payment-page__vendorTile__ratings\">\r\n                          <img src={ratingStar} alt=\"Rating\" />\r\n                          <span>4.5</span>\r\n                        </div> */}\r\n                      </div>\r\n                      <div className=\"col-3 offset-3 d-flex align-items-end justify-content-between flex-column\">\r\n                        <div className=\"\">\r\n                          <input\r\n                            type=\"checkbox\"\r\n                            className=\"custom-toggle-btn\"\r\n                            checked={item.active}\r\n                            onChange={() => disabledItemFromCart(item.serviceID)}\r\n                          />\r\n                        </div>\r\n                        <div className=\"d-flex align-items-center justify-content-between payment-page__vendorTile__pricing\">\r\n                          <img src={rupee} alt=\"Rupee Symbol\" />\r\n                          <span className=\"ml-2\">{item.basePrice}</span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n\r\n                {cartItems.length === 0 && <h2 className=\"text-center\">Your cart is empty</h2>}\r\n              </div>\r\n\r\n              <div className=\"col-12 d-flex align-items-end justify-content-between flex-column mb-3\">\r\n                <div className=\"payment-page__final-pricing\">\r\n                  <span className=\"\">\r\n                    <b>Total</b>\r\n                  </span>\r\n                </div>\r\n                <div className=\"d-flex align-items-center justify-content-between payment-page__vendorTile__pricing payment-page__final-pricing\">\r\n                  <img src={rupee} alt=\"Rupee Symbol\" />\r\n                  <span className=\"ml-2\">{totalAmount}</span>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-12 d-flex align-items-center justify-content-center\">\r\n                <CustomButton {...btnAttributes} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <ModalBase show={show} handleClose={handleClose} handleShow={handleShow} size=\"md\">\r\n        <Modal.Header closeButton>{message?.title} </Modal.Header>\r\n        <Modal.Body>\r\n          <p className=\"mb-0 text-center font-weight-bold\">{message?.message}</p>\r\n        </Modal.Body>\r\n      </ModalBase>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  cartItems: selectCartItems,\r\n  totalAmount: selectCartTotal,\r\n  userDetails: selectUserDetails,\r\n  userToken: selectToken,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  removeItemFromCart: (serviceID) => dispatch(removeFromCart(serviceID)),\r\n  disabledItemFromCart: (serviceID) => dispatch(disableFromCart(serviceID)),\r\n  setToasterCofig: (config) => dispatch(setToasterConfig(config)),\r\n  setCartEmpty: () => dispatch(emptyCart()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Payment));\r\n","import { CartActionTypes } from \"./cart.types\";\r\n\r\nexport const setItemToCart = (payload) => ({\r\n  type: CartActionTypes.SET_ITEM_TO_CART,\r\n  payload: payload,\r\n});\r\nexport const removeFromCart = (payload) => ({\r\n  type: CartActionTypes.REMOVE_ITEM_FROM_CART,\r\n  payload: payload,\r\n});\r\nexport const disableFromCart = (payload) => ({\r\n  type: CartActionTypes.DISABLE_ITEM_FROM_CART,\r\n  payload: payload,\r\n});\r\nexport const emptyCart = () => ({\r\n  type: CartActionTypes.EMPTY_CART,\r\n});\r\n","import { createSelector } from \"reselect\";\r\n\r\nconst selectCart = (state) => state.cart;\r\n\r\nexport const selectCartItems = createSelector([selectCart], (cart) => cart.items);\r\n\r\nexport const selectCartItemsIds = createSelector([selectCartItems], (items) => items.map((item) => item.id));\r\n\r\nexport const selectCartItemsVendors = createSelector([selectCartItems], (items) => items.map((item) => item.vendorID));\r\n\r\nexport const selectCartItemsServices = createSelector([selectCartItems], (items) => items.map((item) => item.serviceID));\r\n\r\nexport const selectCartTotal = createSelector([selectCartItems], (items) => {\r\n  let total = 0;\r\n  items.map((item) => {\r\n    if (item.active) {\r\n      total += item.basePrice;\r\n    }\r\n  });\r\n  return total;\r\n});\r\n"],"names":["mapStateToProps","createStructuredSelector","cartItems","selectCartItems","totalAmount","selectCartTotal","userDetails","selectUserDetails","userToken","selectToken","connect","dispatch","removeItemFromCart","serviceID","removeFromCart","disabledItemFromCart","disableFromCart","setToasterCofig","config","setToasterConfig","setCartEmpty","emptyCart","withRouter","history","ApiContext","useContext","ApiCallsContext","useState","show","setShow","callAPI","setCallAPI","message","setMessage","handlePaymentSubmit","catchHandler","paymentSubmitAPI","response","console","log","title","postObj","total_amount","bookings","forEach","item","active","push","vendorID","baseprice","basePrice","headers","Authorization","postData","API_URLS","data","type","text","classes","onClick","btnAttributes","setbtnAttributes","useEffect","disabled","className","length","map","index","src","profileImage","alt","serviceName","firstName","lastName","checked","onChange","rupee","handleClose","handleShow","size","Modal","closeButton","setItemToCart","payload","CartActionTypes","createSelector","state","cart","items","selectCartItemsVendors","id","selectCartItemsServices","total"],"sourceRoot":""}