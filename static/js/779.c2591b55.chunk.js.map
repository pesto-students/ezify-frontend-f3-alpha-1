{"version":3,"file":"static/js/779.c2591b55.chunk.js","mappings":"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","sources":["pages/profile/profile.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { State, City } from \"country-state-city\";\r\n\r\nimport \"./profile.scss\";\r\n\r\nimport editIcon from \"./../../assets/profile/edit-icon.webp\";\r\n\r\nimport CustomButton from \"../../components/atmoic/customButton/customButton\";\r\nimport { connect } from \"react-redux\";\r\nimport { selectToken, selectUserDetails } from \"../../redux/user/user.selectors\";\r\nimport FormControl from \"../../components/atmoic/formControl/formControl\";\r\nimport { catchHandler } from \"../../utlis/catchHandler.utlis\";\r\nimport { ApiCallsContext } from \"../../services/api.service\";\r\nimport { API_URLS } from \"../../utlis/constants\";\r\nimport { setCurrentUser } from \"../../redux/user/user.actions\";\r\n\r\nconst Profile = ({ userDetails, userToken, setUser }) => {\r\n  const ApiContext = useContext(ApiCallsContext);\r\n\r\n  const [update, setUpdate] = useState(false);\r\n  const [preview, setPreview] = useState(userDetails.profileImage);\r\n\r\n  const handleUpdate = () => setUpdate(true);\r\n  const handleSave = () => setUpdate(false);\r\n  const handleDiscard = () => {\r\n    setPreview(userDetails.profileImage);\r\n    setUpdate(false);\r\n  };\r\n\r\n  const stateOptions = State.getStatesOfCountry(\"IN\").map((state) => {\r\n    return { value: state.isoCode, label: state.name };\r\n  });\r\n\r\n  const selectedStateCode = stateOptions.find((option) => option.label === userDetails.state).value;\r\n\r\n  let cityOptions = City.getCitiesOfState(\"IN\", selectedStateCode).map((city) => {\r\n    return { value: city.name, label: city.name };\r\n  });\r\n\r\n  const SUPPORTED_FORMATS = [\"image/png\", \"image/jpeg\", \"image/jpg\"];\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      firstName: userDetails.firstName,\r\n      lastName: userDetails.lastName,\r\n      mobileNumber: userDetails.mobileNumber,\r\n      state: userDetails.state,\r\n      stateCode: selectedStateCode,\r\n      city: userDetails.city,\r\n      address: userDetails.address,\r\n      profileImage: userDetails.profileImage,\r\n      profileImageFile: \"\",\r\n      roles: userDetails.roles,\r\n    },\r\n    validationSchema: Yup.object({\r\n      firstName: Yup.string().min(3).max(15, \"Must be 15 characters or less\").required(\"Required\"),\r\n      lastName: Yup.string().min(3).max(20, \"Must be 20 characters or less\").required(\"Required\"),\r\n      mobileNumber: Yup.string(\"Invalid mobile number\")\r\n        .min(10, \"Must be a valid 10 digit number\")\r\n        .max(10, \"Must be a valid 10 digit number\")\r\n        .required(\"Required\"),\r\n      state: Yup.string(\"Invalid state\").required(\"Required\"),\r\n      stateCode: Yup.string(\"Invalid state\").required(\"Required\"),\r\n      city: Yup.string(\"Invalid city\").required(\"Required\"),\r\n      // address: Yup.string(\"Invalid address\").min(10).max(200).required(\"Required\"),\r\n      address: Yup.mixed().when(\"roles\", {\r\n        is: \"user\",\r\n        then: Yup.string(\"Invalid address\").min(10).max(200).required(\"Required\"),\r\n        otherwise: Yup.mixed().nullable(),\r\n      }),\r\n      profileImageFile: Yup.mixed()\r\n        .nullable()\r\n        .test(\"FILE_SIZE\", \"File should be less than 3mb\", (value) => !value || (value && value.size > 1024 * 3))\r\n        .test(\"FILE_FORMAT\", \"File should be in png/jpg/jpeg format\", (value) => !value || (value && SUPPORTED_FORMATS.includes(value?.type))),\r\n    }),\r\n    onSubmit: (values) => {\r\n      console.log(values);\r\n      if (formik.isValid) {\r\n        handleProfileUpdate();\r\n      }\r\n    },\r\n  });\r\n\r\n  const handleProfileUpdate = async () => {\r\n    const response = await catchHandler(profileUpdateAPI);\r\n    setUser(response);\r\n    handleSave();\r\n  };\r\n\r\n  const profileUpdateAPI = async () => {\r\n    const { firstName, lastName, mobileNumber, state, city, address, profileImageFile } = formik.values;\r\n\r\n    let formData = new FormData();\r\n    formData.append(\"firstName\", firstName);\r\n    formData.append(\"lastName\", lastName);\r\n    formData.append(\"mobileNumber\", mobileNumber);\r\n    formData.append(\"state\", state);\r\n    formData.append(\"city\", city);\r\n    formData.append(\"address\", address);\r\n\r\n    const headers = {\r\n      Authorization: `Bearer ${userToken}`,\r\n      \"content-type\": \"multipart/form-data\",\r\n    };\r\n\r\n    let path = API_URLS.UPDATE_USER;\r\n\r\n    if (userDetails.roles === \"user\") {\r\n      formData.append(\"file\", profileImageFile);\r\n    } else if (userDetails.roles === \"vendor\") {\r\n      formData.append(\"profileImage\", profileImageFile);\r\n      path = API_URLS.UPDATE_VENDOR;\r\n    }\r\n\r\n    const data = await ApiContext.patchData(path, formData, { headers });\r\n    return data;\r\n  };\r\n\r\n  const updateButtonAttributes = {\r\n    type: \"button\",\r\n    text: \"Update Profile\",\r\n    classes: \"font-weight-bold\",\r\n    onClick: handleUpdate,\r\n  };\r\n\r\n  const [saveButtonAttributes, setSaveButtonAttributes] = useState({\r\n    type: \"submit\",\r\n    text: \"Save Changes\",\r\n    classes: \"font-weight-bold mr-3\",\r\n    disabled: !formik.isValid,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setSaveButtonAttributes({\r\n      type: \"submit\",\r\n      text: \"Save Changes\",\r\n      classes: \"font-weight-bold mr-3\",\r\n      disabled: !formik.isValid,\r\n    });\r\n  }, [formik.isValid]);\r\n\r\n  const discardButtonAttributes = {\r\n    type: \"button\",\r\n    text: \"Discard Changes\",\r\n    classes: \"font-weight-bold red-btn\",\r\n    onClick: handleDiscard,\r\n  };\r\n\r\n  const fNameAttributes = {\r\n    id: \"firstName\",\r\n    label: \"first Name\",\r\n    isMandatory: true,\r\n    type: \"input-formik\",\r\n    formik,\r\n  };\r\n\r\n  const lNameAttributes = {\r\n    id: \"lastName\",\r\n    label: \"Last Name\",\r\n    isMandatory: true,\r\n    type: \"input-formik\",\r\n    formik,\r\n  };\r\n\r\n  const MobileNoAttributes = {\r\n    id: \"mobileNumber\",\r\n    label: \"Mobile\",\r\n    isMandatory: true,\r\n    type: \"input-formik\",\r\n    formik,\r\n  };\r\n\r\n  const [cityAttributes, setCityAttributes] = useState({\r\n    id: \"city\",\r\n    label: \"City\",\r\n    isMandatory: true,\r\n    type: \"select-formik\",\r\n    options: cityOptions,\r\n    defaultValue: cityOptions.find((option) => option.label === userDetails.city),\r\n    onChange: (cityValue) => {\r\n      console.log(cityValue);\r\n      formik.setFieldValue(\"city\", cityValue.value);\r\n    },\r\n    formik,\r\n  });\r\n\r\n  const stateAttributes = {\r\n    id: \"state\",\r\n    label: \"State\",\r\n    isMandatory: true,\r\n    type: \"select-formik\",\r\n    options: stateOptions,\r\n    defaultValue: stateOptions.find((option) => option.label === userDetails.state),\r\n    onChange: (value) => {\r\n      formik.setFieldValue(\"state\", value.label);\r\n      formik.setFieldValue(\"stateCode\", value.value);\r\n\r\n      cityOptions = City.getCitiesOfState(\"IN\", value.value).map((city) => {\r\n        return { value: city.name, label: city.name };\r\n      });\r\n\r\n      formik.setFieldValue(\"city\", cityOptions[0].value);\r\n\r\n      setCityAttributes({\r\n        id: \"city\",\r\n        label: \"City\",\r\n        isMandatory: true,\r\n        type: \"select-formik\",\r\n        options: cityOptions,\r\n        defaultValue: cityOptions[0],\r\n        onChange: (cityValue) => {\r\n          console.log(cityValue);\r\n          formik.setFieldValue(\"city\", cityValue.value);\r\n        },\r\n        formik,\r\n      });\r\n    },\r\n    formik,\r\n  };\r\n\r\n  const addressAttributes = {\r\n    id: \"address\",\r\n    label: \"Address\",\r\n    isMandatory: true,\r\n    type: \"textarea-formik\",\r\n    formik,\r\n  };\r\n\r\n  const previewFile = (file) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      setPreview(reader.result);\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"container profilePage\">\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <div className=\"row\">\r\n          <div className=\"col-12\">\r\n            <h2 className=\"profilePage__title\">Your Profile</h2>\r\n          </div>\r\n\r\n          <div className=\"col-12 px-5 pl-lg-3 profilePage__box\">\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-3 mb-5 mb-lg-0 d-flex align-items-start justify-content-center\">\r\n                <div className=\"profilePage__image\">\r\n                  {!update && <img src={userDetails.profileImage} alt=\"Profile\" className=\"profilePage__image--img\" />}\r\n                  {update && <img src={preview} alt=\"Profile\" className=\"profilePage__image--img\" />}\r\n                  {update && (\r\n                    <img\r\n                      src={editIcon}\r\n                      alt=\"Edit\"\r\n                      className=\"profilePage__image--edit\"\r\n                      onClick={() => document.getElementById(\"profileImageFile\").click()}\r\n                    />\r\n                  )}\r\n                  {update && (\r\n                    <>\r\n                      <input\r\n                        type=\"file\"\r\n                        accept=\"image/png, image/jpeg, image/jpg\"\r\n                        id=\"profileImageFile\"\r\n                        onChange={(e) => {\r\n                          formik.setFieldValue(\"profileImageFile\", e.target.files[0]);\r\n                          previewFile(e.target.files[0]);\r\n                        }}\r\n                      />\r\n                      <small className=\"text-danger errorMsg\">{formik.errors[\"profileImageFile\"]}</small>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-lg-9\">\r\n                <div className=\"row border-bottom pb-3\">\r\n                  <div className=\"col-md-6\">\r\n                    {!update && (\r\n                      <>\r\n                        <label htmlFor=\"firstName\" className=\"profilePage__box--label\">\r\n                          First Name\r\n                        </label>\r\n                        <div className=\"profilePage__box--value\">{userDetails.firstName}</div>\r\n                      </>\r\n                    )}\r\n\r\n                    {update && <FormControl {...fNameAttributes} />}\r\n                  </div>\r\n                  <div className=\"col-md-6 mt-4 mt-md-0\">\r\n                    {!update && (\r\n                      <>\r\n                        <label htmlFor=\"firstName\" className=\"profilePage__box--label\">\r\n                          Last Name\r\n                        </label>\r\n                        <div className=\"profilePage__box--value\">{userDetails.lastName}</div>\r\n                      </>\r\n                    )}\r\n\r\n                    {update && <FormControl {...lNameAttributes} />}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"row border-bottom pb-3 mt-3\">\r\n                  <div className=\"col-md-6\">\r\n                    <label htmlFor=\"firstName\" className=\"profilePage__box--label\">\r\n                      Email\r\n                    </label>\r\n                    <div className=\"profilePage__box--value\">{userDetails.email}</div>\r\n                  </div>\r\n                  <div className=\"col-md-6 mt-4 mt-md-0\">\r\n                    {!update && (\r\n                      <>\r\n                        <label htmlFor=\"firstName\" className=\"profilePage__box--label\">\r\n                          Mobile Number\r\n                        </label>\r\n                        <div className=\"profilePage__box--value\">+91 {userDetails.mobileNumber}</div>\r\n                      </>\r\n                    )}\r\n\r\n                    {update && <FormControl {...MobileNoAttributes} />}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"row border-bottom pb-3 mt-3\">\r\n                  <div className=\"col-md-6\">\r\n                    {!update && (\r\n                      <>\r\n                        <label htmlFor=\"firstName\" className=\"profilePage__box--label\">\r\n                          State\r\n                        </label>\r\n                        <div className=\"profilePage__box--value\">{userDetails.state}</div>\r\n                      </>\r\n                    )}\r\n\r\n                    {update && <FormControl {...stateAttributes} />}\r\n                  </div>\r\n                  <div className=\"col-md-6 mt-4 mt-md-0\">\r\n                    {!update && (\r\n                      <>\r\n                        <label htmlFor=\"firstName\" className=\"profilePage__box--label\">\r\n                          City\r\n                        </label>\r\n                        <div className=\"profilePage__box--value\">{userDetails.city}</div>\r\n                      </>\r\n                    )}\r\n\r\n                    {update && <FormControl {...cityAttributes} />}\r\n                  </div>\r\n                </div>\r\n\r\n                {userDetails.roles !== \"vendor\" && (\r\n                  <div className=\"row pb-3 mt-3\">\r\n                    <div className=\"col-12\">\r\n                      {!update && (\r\n                        <>\r\n                          <label htmlFor=\"firstName\" className=\"profilePage__box--label\">\r\n                            Address\r\n                          </label>\r\n                          <div className=\"profilePage__box--value\">{userDetails.address}</div>\r\n                        </>\r\n                      )}\r\n\r\n                      {update && <FormControl {...addressAttributes} />}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                <div className=\"row mt-3\">\r\n                  <div className=\"col-12 d-flex align-items-center justify-content-end\">\r\n                    {!update && <CustomButton {...updateButtonAttributes} />}\r\n                    {update && <CustomButton {...saveButtonAttributes} />}\r\n                    {update && <CustomButton {...discardButtonAttributes} />}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  userDetails: selectUserDetails,\r\n  userToken: selectToken,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setUser: (user) => dispatch(setCurrentUser(user)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\r\n"],"names":["mapStateToProps","createStructuredSelector","userDetails","selectUserDetails","userToken","selectToken","connect","dispatch","setUser","user","setCurrentUser","ApiContext","useContext","ApiCallsContext","useState","update","setUpdate","profileImage","preview","setPreview","stateOptions","State","map","state","value","isoCode","label","name","selectedStateCode","find","option","cityOptions","City","city","SUPPORTED_FORMATS","formik","useFormik","initialValues","firstName","lastName","mobileNumber","stateCode","address","profileImageFile","roles","validationSchema","Yup","min","max","required","when","is","then","otherwise","nullable","test","size","includes","type","onSubmit","values","console","log","isValid","handleProfileUpdate","catchHandler","profileUpdateAPI","response","formData","FormData","append","headers","Authorization","path","API_URLS","patchData","data","updateButtonAttributes","text","classes","onClick","disabled","saveButtonAttributes","setSaveButtonAttributes","useEffect","discardButtonAttributes","fNameAttributes","id","isMandatory","lNameAttributes","MobileNoAttributes","options","defaultValue","onChange","cityValue","setFieldValue","cityAttributes","setCityAttributes","stateAttributes","addressAttributes","className","handleSubmit","src","alt","editIcon","document","getElementById","click","accept","e","target","files","file","reader","FileReader","readAsDataURL","onload","result","previewFile","errors","htmlFor","email"],"sourceRoot":""}